{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/enums/ChainId.ts","../src/constants/addresses.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/entities/AbstractCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/entities/NativeCurrency.ts","../src/entities/natives/Matic.ts","../src/entities/natives/Binance.ts","../src/constants/index.ts","../src/constants/natives.ts","../src/utils.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts","../src/functions/computePairAddress.ts"],"sourcesContent":["export enum ChainId {\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  MAINNET = 56,\n  BSCTESTNET = 97\n}\n","import { ChainId } from '../enums/ChainId'\n\nexport const FACTORY_ADDRESSES: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xaB9A2CB71E526ADD626747fD4D738f80572233D2',\n  [ChainId.BSCTESTNET]: '0x8a13265913EF40C4EA6D8519c2281c2A1fC5e93d'\n}\n\nexport const ROUTER_ADDRESSES: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0x037D2Ab45B62aaf282473c20425B8EA1eF3d4dDd',\n  [ChainId.BSCTESTNET]: '0x09FceE7287f882c5eEAb8032A64FDE54Fc1dD055'\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\nimport { ChainId } from 'enums/ChainId'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: ChainId\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../enums'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WNATIVE: { [chainId in ChainId]: Token } = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.BSCTESTNET]: new Token(\n    ChainId.BSCTESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  )\n}\n","import invariant from 'tiny-invariant'\n\nimport { AbstractCurrency } from './AbstractCurrency'\nimport { Currency } from './Currency'\nimport { Token, WNATIVE } from './Token'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { NativeCurrency } from '../NativeCurrency'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n}\n","import { NativeCurrency } from '../NativeCurrency'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n}\n","export * from './addresses'\nexport * from './natives'\n\nimport JSBI from 'jsbi'\n\nexport const INIT_CODE_HASH = '0x6d5fdaab3371d5d158f62abbc39e801a20feab6444a5750398a310ff3730c659'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _998 = JSBI.BigInt(998)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","import { Binance, Matic } from '../entities/natives'\n\nimport { ChainId } from '../enums'\nimport { NativeCurrency } from 'entities/NativeCurrency'\n\nexport const NATIVE: { [chainId in ChainId]: NativeCurrency } = {\n  [ChainId.MAINNET]: Binance.onChain(ChainId.MAINNET),\n  [ChainId.BSCTESTNET]: Binance.onChain(ChainId.BSCTESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET)\n}\n","import { getAddress } from '@ethersproject/address'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport { ONE, SolidityType, SOLIDITY_TYPE_MAXIMA, THREE, TWO, ZERO } from './constants'\nimport { BigintIsh } from './types'\n\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt((bigintIsh as any).toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { Rounding } from '../../enums'\nimport { BigintIsh } from '../../types'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { Currency } from '../Currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\nimport { Rounding } from '../../enums/Rounding'\nimport { BigintIsh } from '../../types'\nimport { NATIVE } from '../../constants'\nimport { ChainId } from 'enums/ChainId'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the NATIVE currency respected with chainId\n   * @param amount ether amount in wei\n   */\n  public static native(amount: BigintIsh, chainId: ChainId): CurrencyAmount {\n    return new CurrencyAmount(NATIVE[chainId], amount)\n  }\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount(currency: Currency, rawAmount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(this.currency.equals(other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(this.currency.equals(other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../Token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../types'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../Token'\nimport { TokenAmount } from './tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { TEN } from '../../constants'\nimport { Rounding } from '../../enums'\nimport { BigintIsh } from '../../types'\nimport { Currency } from '../Currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.native(super.multiply(currencyAmount.raw).quotient, currencyAmount.currency.chainId)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { FACTORY_ADDRESSES } from './../constants'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { INIT_CODE_HASH, MINIMUM_LIQUIDITY, ZERO, ONE, FIVE, _998, _1000 } from '../constants'\n\nimport { BigintIsh } from '../types'\nimport { ChainId } from '../enums'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './Token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    const factoryAddress = FACTORY_ADDRESSES[tokenA.chainId]\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            factoryAddress,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _998)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _998)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../enums'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './Currency'\nimport { Token } from './Token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { _100 } from '../../constants'\nimport { Rounding } from '../../enums'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../constants'\nimport { ChainId, TradeType } from '../enums'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { WNATIVE } from './Token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency.isNative) return new TokenAmount(WNATIVE[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n      this.inputAmount = amount\n      this.outputAmount = CurrencyAmount.fromRawAmount(route.output, tokenAmounts[tokenAmounts.length - 1].raw)\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n      this.inputAmount = CurrencyAmount.fromRawAmount(route.input, tokenAmounts[0].raw)\n      this.outputAmount = amount\n    }\n\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n      // return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn);\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = wrappedAmount(currencyAmountIn, currencyAmountIn.currency.chainId)\n\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined = currencyAmountOut.currency.chainId\n    // currencyAmountOut instanceof TokenAmount\n    //   ? currencyAmountOut.token.chainId\n    //   : currencyIn instanceof Token\n    //   ? currencyIn.chainId\n    //   : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './enums'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const nativeIn = trade.inputAmount.currency.isNative\n    const nativeOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(nativeIn && nativeOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (nativeIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (nativeOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (nativeIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (nativeOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport ILuckyswapPair from '@luckyswap/v2-core/build/LuckyswapPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './enums'\nimport { Token } from './entities/Token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, ILuckyswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities/Token'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\n"],"names":["ChainId","FACTORY_ADDRESSES","MAINNET","MATIC","MATIC_TESTNET","BSCTESTNET","ROUTER_ADDRESSES","Rounding","TradeType","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","validateAndParseAddress","address","getAddress","error","Token","equals","other","isToken","this","sortsBefore","toLowerCase","WNATIVE","NativeCurrency","isNative","wnative","Matic","_NativeCurrency","onChain","_cache","Binance","SolidityType","NATIVE","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_998","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","lessThanOrEqual","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","fromRawAmount","rawAmount","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","wrappedInput","wrapped","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","Trade","tradeType","exactQuote","slippage","Array","nextPairs","EXACT_INPUT","i","nextPair","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","nativeIn","nativeOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","ILuckyswapPair","abi","getReserves","reserves0","reserves1","balances","factoryAddress","currencyA","currencyB"],"mappings":"8IAAYA,+ZAAAA,EAAAA,kBAAAA,0CAEVA,yCACAA,0BACAA,oCCFWC,UACVD,gBAAQE,SAAU,+CAClBF,gBAAQG,OAAQ,+CAChBH,gBAAQI,eAAgB,+CACxBJ,gBAAQK,YAAa,gDAGXC,UACVN,gBAAQE,SAAU,+CAClBF,gBAAQG,OAAQ,+CAChBH,gBAAQI,eAAgB,+CACxBJ,gBAAQK,YAAa,mnFCbZE,ECAAC,ICQUC,EAkCpB,SAAsBC,EAAiBC,EAAkBC,EAAiBC,GAC9DC,OAAOC,cAAcL,IAA/BM,MACUL,GAAY,GAAKA,EAAW,KAAOG,OAAOG,UAAUN,IAA9DK,WAEKN,QAAUA,OACVC,SAAWA,OACXC,OAASA,OACTC,KAAOA,YC5CAK,EAAwBC,cAETC,aAAWD,GAGtC,MAAOE,GACPL,QHXQT,EAAAA,mBAAAA,mDAEVA,qCACAA,4BCHUC,EAAAA,oBAAAA,sDAEVA,uCGMWc,yBAOQZ,EAAkBS,EAAiBR,EAAkBC,EAAiBC,8BACjFH,EAASC,EAAUC,EAAQC,oBAJD,aACF,IAIzBH,QAAUA,IACVS,QAAUD,EAAwBC,uCAOlCI,OAAA,SAAOC,UACLA,EAAMC,SAAWC,KAAKhB,UAAYc,EAAMd,SAAWgB,KAAKP,UAAYK,EAAML,WAS5EQ,YAAA,SAAYH,UACPE,KAAKhB,UAAYc,EAAMd,SAAjCM,MACUU,KAAKP,UAAYK,EAAML,SAAjCH,MACOU,KAAKP,QAAQS,cAAgBJ,EAAML,QAAQS,yDAO3CF,YArCgBjB,GAwDdoB,UACV7B,gBAAQE,SAAU,IAAIoB,EACrBtB,gBAAQE,QACR,6CACA,GACA,OACA,iBAEDF,gBAAQK,YAAa,IAAIiB,EACxBtB,gBAAQK,WACR,6CACA,GACA,OACA,iBAEDL,gBAAQG,OAAQ,IAAImB,EACnBtB,gBAAQG,MACR,6CACA,GACA,SACA,mBAEDH,gBAAQI,eAAgB,IAAIkB,EAC3BtB,gBAAQI,cACR,6CACA,GACA,SACA,oBClFkB0B,mFACa,aACA,8BAQ1BP,OAAA,SAAOC,UACLA,EAAMO,UAAYP,EAAMd,UAAYgB,KAAKhB,gDAN1CsB,EAAUH,EAAQH,KAAKhB,gBACjBsB,GAAZhB,MACOgB,SAPkCvB,GCPhCwB,yBACWvB,UACpBwB,YAAMxB,EAAS,GAAI,QAAS,+BAIhByB,QAAP,SAAezB,0BACbgB,KAAKU,OAAO1B,kBAAagB,KAAKU,OAAO1B,GAAW,IAAIuB,EAAMvB,OAP1CoB,GAIVG,SAAuC,SCJ3CI,yBACW3B,UACpBwB,YAAMxB,EAAS,GAAI,MAAO,sCAKdyB,QAAP,SAAezB,0BACbgB,KAAKU,OAAO1B,kBAAagB,KAAKU,OAAO1B,GAAW,IAAI2B,EAAQ3B,OAR1CoB,GAKZO,SAAyC,SCY9CC,ECdCC,UACVvC,gBAAQE,SAAUmC,EAAQF,QAAQnC,gBAAQE,WAC1CF,gBAAQK,YAAagC,EAAQF,QAAQnC,gBAAQK,cAC7CL,gBAAQG,OAAQ8B,EAAME,QAAQnC,gBAAQG,SACtCH,gBAAQI,eAAgB6B,EAAME,QAAQnC,gBAAQI,kBDJpCoC,EAAiB,qEAEjBC,EAAoBC,EAAKC,OAAO,KAEhCC,EAAOF,EAAKC,OAAO,GACnBE,EAAMH,EAAKC,OAAO,GAClBG,EAAMJ,EAAKC,OAAO,GAClBI,EAAQL,EAAKC,OAAO,GACpBK,EAAON,EAAKC,OAAO,GACnBM,EAAMP,EAAKC,OAAO,IAClBO,EAAOR,EAAKC,OAAO,KACnBQ,EAAOT,EAAKC,OAAO,KACnBS,EAAQV,EAAKC,OAAO,MAErBL,EAAAA,uBAAAA,wCAEVA,8BAGWe,WACVf,qBAAagB,OAAQZ,EAAKC,OAAO,UACjCL,qBAAaiB,SAAUb,EAAKC,OAAO,kFElBtBa,GAA6BC,EAAaC,GAC9ChB,EAAKiB,mBAAmBF,EAAOb,IAAzC5B,MACU0B,EAAKkB,gBAAgBH,EAAOJ,GAAqBK,KAA3D1C,eAcc6C,GAAeC,UACtBA,aAAqBpB,EACxBoB,EAEApB,EAAKC,OADgB,iBAAdmB,EACMA,EAAkBC,WACnBD,YAIFE,GAAKC,GACnBT,GAA6BS,EAAG3B,qBAAaiB,aAEzCW,EADAC,EAAUvB,KAEVF,EAAK0B,YAAYH,EAAGlB,OACtBoB,EAAIF,EACJC,EAAIxB,EAAK2B,IAAI3B,EAAK4B,OAAOL,EAAGnB,GAAMD,GAC3BH,EAAK6B,SAASL,EAAGC,IACtBA,EAAID,EACJA,EAAIxB,EAAK4B,OAAO5B,EAAK2B,IAAI3B,EAAK4B,OAAOL,EAAGC,GAAIA,GAAIpB,QAEzCJ,EAAK8B,SAASP,EAAGrB,KAC1BuB,EAAItB,UAECsB,EAKT,SAAgBM,GAAgBC,EAAYL,EAAQM,EAAiBC,MACzDD,EAAU,GAApB3D,MAEU0D,EAAMG,QAAUF,GAA1B3D,MAGqB,IAAjB0D,EAAMG,cACRH,EAAMI,KAAKT,GACJ,SAEDU,EAASL,EAAMG,SAAWF,KAE5BI,GAAUH,EAAWF,EAAMA,EAAMG,OAAS,GAAIR,IAAQ,SACjDA,UAGLW,EAAK,EACPC,EAAKP,EAAMG,OAENG,EAAKC,GAAI,KACRC,EAAOF,EAAKC,IAAQ,EACtBL,EAAWF,EAAMQ,GAAMb,IAAQ,EACjCW,EAAKE,EAAM,EAEXD,EAAKC,SAGTR,EAAMS,OAAOH,EAAI,EAAGX,GACbU,EAASL,EAAMU,MAAS,KCrEnC,IAAMC,GAAUC,EAASC,GACnBC,GAAMF,EAASG,GAEfC,YACHnF,iBAASoF,YAAaN,GAAQM,cAC9BpF,iBAASqF,eAAgBP,GAAQO,iBACjCrF,iBAASsF,UAAWR,GAAQQ,aAGzBC,YACHvF,iBAASoF,iBACTpF,iBAASqF,oBACTrF,iBAASsF,gBAGCE,yBAIQC,EAAsBC,YAAAA,IAAAA,EAAyBpD,QAC3DmD,UAAYnC,GAAemC,QAC3BC,YAAcpC,GAAeoC,8BAa7BC,OAAA,kBACE,IAAIH,EAASrE,KAAKuE,YAAavE,KAAKsE,cAGtC3B,IAAA,SAAI7C,OACH2E,EAAc3E,aAAiBuE,EAAWvE,EAAQ,IAAIuE,EAASlC,GAAerC,WAChFkB,EAAK0D,MAAM1E,KAAKuE,YAAaE,EAAYF,aACpC,IAAIF,EAASrD,EAAK2B,IAAI3C,KAAKsE,UAAWG,EAAYH,WAAYtE,KAAKuE,aAErE,IAAIF,EACTrD,EAAK2B,IACH3B,EAAK2D,SAAS3E,KAAKsE,UAAWG,EAAYF,aAC1CvD,EAAK2D,SAASF,EAAYH,UAAWtE,KAAKuE,cAE5CvD,EAAK2D,SAAS3E,KAAKuE,YAAaE,EAAYF,iBAIzCK,SAAA,SAAS9E,OACR2E,EAAc3E,aAAiBuE,EAAWvE,EAAQ,IAAIuE,EAASlC,GAAerC,WAChFkB,EAAK0D,MAAM1E,KAAKuE,YAAaE,EAAYF,aACpC,IAAIF,EAASrD,EAAK4D,SAAS5E,KAAKsE,UAAWG,EAAYH,WAAYtE,KAAKuE,aAE1E,IAAIF,EACTrD,EAAK4D,SACH5D,EAAK2D,SAAS3E,KAAKsE,UAAWG,EAAYF,aAC1CvD,EAAK2D,SAASF,EAAYH,UAAWtE,KAAKuE,cAE5CvD,EAAK2D,SAAS3E,KAAKuE,YAAaE,EAAYF,iBAIzC1B,SAAA,SAAS/C,OACR2E,EAAc3E,aAAiBuE,EAAWvE,EAAQ,IAAIuE,EAASlC,GAAerC,WAC7EkB,EAAK6B,SACV7B,EAAK2D,SAAS3E,KAAKsE,UAAWG,EAAYF,aAC1CvD,EAAK2D,SAASF,EAAYH,UAAWtE,KAAKuE,iBAIvCM,QAAA,SAAQ/E,OACP2E,EAAc3E,aAAiBuE,EAAWvE,EAAQ,IAAIuE,EAASlC,GAAerC,WAC7EkB,EAAK0D,MACV1D,EAAK2D,SAAS3E,KAAKsE,UAAWG,EAAYF,aAC1CvD,EAAK2D,SAASF,EAAYH,UAAWtE,KAAKuE,iBAIvC7B,YAAA,SAAY5C,OACX2E,EAAc3E,aAAiBuE,EAAWvE,EAAQ,IAAIuE,EAASlC,GAAerC,WAC7EkB,EAAK0B,YACV1B,EAAK2D,SAAS3E,KAAKsE,UAAWG,EAAYF,aAC1CvD,EAAK2D,SAASF,EAAYH,UAAWtE,KAAKuE,iBAIvCI,SAAA,SAAS7E,OACR2E,EAAc3E,aAAiBuE,EAAWvE,EAAQ,IAAIuE,EAASlC,GAAerC,WAC7E,IAAIuE,EACTrD,EAAK2D,SAAS3E,KAAKsE,UAAWG,EAAYH,WAC1CtD,EAAK2D,SAAS3E,KAAKuE,YAAaE,EAAYF,iBAIzC3B,OAAA,SAAO9C,OACN2E,EAAc3E,aAAiBuE,EAAWvE,EAAQ,IAAIuE,EAASlC,GAAerC,WAC7E,IAAIuE,EACTrD,EAAK2D,SAAS3E,KAAKsE,UAAWG,EAAYF,aAC1CvD,EAAK2D,SAAS3E,KAAKuE,YAAaE,EAAYH,eAIzCQ,cAAA,SACLC,EACAC,EACAC,YADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqBpG,iBAASqF,eAEpB9E,OAAOG,UAAUwF,IAA3BzF,MACUyF,EAAoB,GAA9BzF,MAEAqE,GAAQwB,IAAI,CAAEC,UAAWL,EAAoB,EAAGE,SAAUjB,GAAsBiB,SAC1EI,EAAW,IAAI1B,GAAQ3D,KAAKsE,UAAUjC,YACzCiD,IAAItF,KAAKuE,YAAYlC,YACrBkD,oBAAoBR,UAChBM,EAASzB,SAASyB,EAASG,gBAAiBR,MAG9CS,QAAA,SACLD,EACAR,EACAC,mBADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqBpG,iBAASqF,eAEpB9E,OAAOG,UAAUiG,IAA3BlG,MACUkG,GAAiB,GAA3BlG,MAEAwE,GAAI4B,GAAKF,EACT1B,GAAI6B,GAAKvB,GAAgBa,GAClB,IAAInB,GAAI9D,KAAKsE,UAAUjC,YAAYiD,IAAItF,KAAKuE,YAAYlC,YAAYuB,SAAS4B,EAAeR,+CAzG5FhE,EAAK4B,OAAO5C,KAAKsE,UAAWtE,KAAKuE,sDAKjC,IAAIF,EAASrD,EAAK4E,UAAU5F,KAAKsE,UAAWtE,KAAKuE,aAAcvE,KAAKuE,sBC5BzET,GAAMF,EAASG,GAER8B,0BAqBWC,EAAoBC,SAClCC,EAAe7D,GAAe4D,UACpCjE,GAA6BkE,EAAcpF,qBAAaiB,wBAElDmE,EAAchF,EAAKiF,aAAa1E,EAAKP,EAAKC,OAAO6E,EAAS7G,mBAC3D6G,SAAWA,oBAnBX,SAAcC,EAAmB/G,UAC/B,IAAI6G,EAAehF,EAAO7B,GAAU+G,MAQ/BG,cAAP,SAAqBJ,EAAoBK,UACvC,IAAIN,EAAeC,EAAUK,+BAgB/BxD,IAAA,SAAI7C,UACCE,KAAK8F,SAASjG,OAAOC,EAAMgG,WAArCxG,MACO,IAAIuG,EAAe7F,KAAK8F,SAAU9E,EAAK2B,IAAI3C,KAAKoG,IAAKtG,EAAMsG,SAG7DxB,SAAA,SAAS9E,UACJE,KAAK8F,SAASjG,OAAOC,EAAMgG,WAArCxG,MACO,IAAIuG,EAAe7F,KAAK8F,SAAU9E,EAAK4D,SAAS5E,KAAKoG,IAAKtG,EAAMsG,SAGlEtB,cAAA,SACLC,EACAC,EACAC,mBAFAF,IAAAA,EAA4B,YAE5BE,IAAAA,EAAqBpG,iBAASoF,wBAEjBa,wBAAcC,EAAmBC,EAAQC,MAGjDQ,QAAA,SACLD,EACAR,EACAC,mBAFAO,IAAAA,EAAwBxF,KAAK8F,SAAS7G,mBAEtCgG,IAAAA,EAAqBpG,iBAASoF,YAEpBuB,GAAiBxF,KAAK8F,SAAS7G,UAAzCK,kBACamG,kBAAQD,EAAeR,EAAQC,MAGvCoB,QAAA,SAAQrB,mBAAAA,IAAAA,EAAiB,CAAEE,eAAgB,KAChDpB,GAAI4B,GAAK1F,KAAK8F,SAAS7G,SAChB,IAAI6E,GAAI9D,KAAKsE,UAAUjC,YAAYiD,IAAItF,KAAKuE,YAAYlC,YAAYuB,SAASoB,0CAhC7EhF,KAAKsE,iBA9BoBD,ICTvBiC,0BAIQC,EAAcR,8BACzBQ,EAAOR,UACRQ,MAAQA,sCAGR5D,IAAA,SAAI7C,UACCE,KAAKuG,MAAM1G,OAAOC,EAAMyG,QAAlCjH,MACO,IAAIgH,EAAYtG,KAAKuG,MAAOvF,EAAK2B,IAAI3C,KAAKoG,IAAKtG,EAAMsG,SAGvDxB,SAAA,SAAS9E,UACJE,KAAKuG,MAAM1G,OAAOC,EAAMyG,QAAlCjH,MACO,IAAIgH,EAAYtG,KAAKuG,MAAOvF,EAAK4D,SAAS5E,KAAKoG,IAAKtG,EAAMsG,UAhBpCP,ICMpBW,0BAkBQC,EAAwBC,EAAyBnC,EAAwBD,8BACpFA,EAAWC,UAEZkC,aAAeA,IACfC,cAAgBA,IAChBC,OAAS,IAAItC,GAChBrD,EAAKiF,aAAa1E,EAAKP,EAAKC,OAAOwF,EAAaxH,WAChD+B,EAAKiF,aAAa1E,EAAKP,EAAKC,OAAOyF,EAAczH,uBApBvC2H,UAAP,SAAiBC,aAChBC,EAAkB,OACAD,EAAME,MAAMC,0BAAW,eAAhCC,OACbH,EAAO1D,KACLyD,EAAMK,WAAQrH,OAAOoH,EAAKE,QACtB,IAAIX,EAAMS,EAAKG,SAAStB,SAAUmB,EAAKI,SAASvB,SAAUmB,EAAKG,SAAShB,IAAKa,EAAKI,SAASjB,KAC3F,IAAII,EAAMS,EAAKI,SAASvB,SAAUmB,EAAKG,SAAStB,SAAUmB,EAAKI,SAASjB,IAAKa,EAAKG,SAAShB,aAG5FU,EAAOQ,MAAM,GAAGC,QAAO,SAACC,EAAaC,UAAiBD,EAAY7C,SAAS8C,KAAeX,EAAO,gCAuBnGtC,OAAA,kBACE,IAAIgC,EAAMxG,KAAK0G,cAAe1G,KAAKyG,aAAczG,KAAKsE,UAAWtE,KAAKuE,gBAGxEI,SAAA,SAAS7E,GACJE,KAAK0G,cAAc7G,OAAOC,EAAM2G,eAA1CnH,UACMoI,cAAiB/C,mBAAS7E,UACzB,IAAI0G,EAAMxG,KAAKyG,aAAc3G,EAAM4G,cAAegB,EAASnD,YAAamD,EAASpD,cAInFqD,MAAA,SAAMC,UACDA,EAAe9B,SAASjG,OAAOG,KAAKyG,eAA9CnH,MACIU,KAAK0G,yBAAyB9G,EACzB,IAAI0G,GAAYtG,KAAK0G,cAAemB,YAAMlD,mBAASiD,EAAexB,KAAKf,UAEzEQ,UAAsBgC,YAAMlD,mBAASiD,EAAexB,KAAKf,SAAUuC,EAAe9B,SAAS9G,YAG7F8F,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,GACxC/E,KAAK8H,SAAShD,cAAcC,EAAmBC,EAAQC,MAGzDQ,QAAA,SAAQD,EAA2BR,EAAiBC,mBAA5CO,IAAAA,EAAwB,GAC9BxF,KAAK8H,SAASrC,QAAQD,EAAeR,EAAQC,0CA/B7C,IAAIZ,GAASrE,KAAKsE,UAAWtE,KAAKuE,iEAI5BI,mBAAS3E,KAAK2G,eAlCJtC,ICZrB0D,GAAoB,mBAAoBC,OAMjCC,4FACyC,IAI7C9I,KAAO+I,EAAKC,YAAYhJ,KACzB4I,IAAmBC,OAAOI,gEAAgCC,gCANnBC,QAclCC,+FAC4C,IAIhDpJ,KAAOqJ,EAAKL,YAAYhJ,KACzB4I,IAAmBC,OAAOI,gEAAgCC,gCANhBC,QCL9CG,GAAuF,GAE9EC,yBA0BQC,EAA2BC,OACtCC,EAAeF,EAAapC,MAAMtG,YAAY2I,EAAarC,OAC7D,CAACoC,EAAcC,GACf,CAACA,EAAcD,QACdG,eAAiB,IAAIlJ,EACxBiJ,EAAa,GAAGtC,MAAMvH,QACtB0J,EAAKhJ,WAAWmJ,EAAa,GAAGtC,MAAOsC,EAAa,GAAGtC,OACvD,GACA,SACA,mBAEGsC,aAAeA,IAjCRnJ,WAAP,SAAkBqJ,EAAeC,iBAChCC,EAASF,EAAO9I,YAAY+I,GAAU,CAACD,EAAQC,GAAU,CAACA,EAAQD,eAIHG,eAAjET,6BAAqBQ,EAAO,GAAGxJ,+BAAWwJ,EAAO,GAAGxJ,YACtDgJ,QACKA,WACFQ,EAAO,GAAGxJ,wBACNgJ,uBAAAU,EAAqBF,EAAO,GAAGxJ,iBACjCwJ,EAAO,GAAGxJ,SAAU2J,oBAPJ7K,EAAkBwK,EAAO/J,SASxCqK,YAAU,CAAC,SAAU,CAACC,OAAK,CAAC,UAAW,WAAY,CAACL,EAAO,GAAGxJ,QAASwJ,EAAO,GAAGxJ,YACjFqB,YAMD2H,GAAmBQ,EAAO,GAAGxJ,SAASwJ,EAAO,GAAGxJ,qCAqBlD8J,cAAA,SAAchD,UACZA,EAAM1G,OAAOG,KAAKmH,SAAWZ,EAAM1G,OAAOG,KAAKwJ,WAqBjDC,QAAA,SAAQlD,UACHvG,KAAKuJ,cAAchD,IAA7BjH,MACOiH,EAAM1G,OAAOG,KAAKmH,QAAUnH,KAAK0J,YAAc1J,KAAK2J,eA0BtDC,UAAA,SAAUrD,UACLvG,KAAKuJ,cAAchD,IAA7BjH,MACOiH,EAAM1G,OAAOG,KAAKmH,QAAUnH,KAAKoH,SAAWpH,KAAKqH,YAGnDwC,gBAAA,SAAgBC,MACX9J,KAAKuJ,cAAcO,EAAYvD,QAAzCjH,MACI0B,EAAK0D,MAAM1E,KAAKoH,SAAShB,IAAKlF,IAASF,EAAK0D,MAAM1E,KAAKqH,SAASjB,IAAKlF,SACjE,IAAI+G,OAEN8B,EAAe/J,KAAK4J,UAAUE,EAAYvD,OAC1CyD,EAAgBhK,KAAK4J,UAAUE,EAAYvD,MAAM1G,OAAOG,KAAKmH,QAAUnH,KAAKwJ,OAASxJ,KAAKmH,QAC1F8C,EAAqBjJ,EAAK2D,SAASmF,EAAY1D,IAAK3E,GACpD6C,EAAYtD,EAAK2D,SAASsF,EAAoBD,EAAc5D,KAC5D7B,EAAcvD,EAAK2B,IAAI3B,EAAK2D,SAASoF,EAAa3D,IAAK1E,GAAQuI,GAC/DC,EAAe,IAAI5D,GACvBwD,EAAYvD,MAAM1G,OAAOG,KAAKmH,QAAUnH,KAAKwJ,OAASxJ,KAAKmH,OAC3DnG,EAAK4B,OAAO0B,EAAWC,OAErBvD,EAAK0D,MAAMwF,EAAa9D,IAAKlF,SACzB,IAAIqH,SAEL,CAAC2B,EAAc,IAAIxB,EAAKqB,EAAapH,IAAImH,GAAcE,EAAcpF,SAASsF,QAGhFC,eAAA,SAAeD,MACVlK,KAAKuJ,cAAcW,EAAa3D,QAA1CjH,MAEE0B,EAAK0D,MAAM1E,KAAKoH,SAAShB,IAAKlF,IAC9BF,EAAK0D,MAAM1E,KAAKqH,SAASjB,IAAKlF,IAC9BF,EAAKiB,mBAAmBiI,EAAa9D,IAAKpG,KAAK4J,UAAUM,EAAa3D,OAAOH,WAEvE,IAAI6B,OAGN+B,EAAgBhK,KAAK4J,UAAUM,EAAa3D,OAC5CwD,EAAe/J,KAAK4J,UAAUM,EAAa3D,MAAM1G,OAAOG,KAAKmH,QAAUnH,KAAKwJ,OAASxJ,KAAKmH,QAC1F7C,EAAYtD,EAAK2D,SAAS3D,EAAK2D,SAASoF,EAAa3D,IAAK8D,EAAa9D,KAAM1E,GAC7E6C,EAAcvD,EAAK2D,SAAS3D,EAAK4D,SAASoF,EAAc5D,IAAK8D,EAAa9D,KAAM3E,GAChFqI,EAAc,IAAIxD,GACtB4D,EAAa3D,MAAM1G,OAAOG,KAAKmH,QAAUnH,KAAKwJ,OAASxJ,KAAKmH,OAC5DnG,EAAK2B,IAAI3B,EAAK4B,OAAO0B,EAAWC,GAAcpD,UAEzC,CAAC2I,EAAa,IAAIpB,EAAKqB,EAAapH,IAAImH,GAAcE,EAAcpF,SAASsF,QAG/EE,mBAAA,SACLC,EACA1B,EACAC,GAEUyB,EAAY9D,MAAM1G,OAAOG,KAAK8I,iBAAxCxJ,UAMIgL,EALEzB,EAAeF,EAAapC,MAAMtG,YAAY2I,EAAarC,OAC7D,CAACoC,EAAcC,GACf,CAACA,EAAcD,MACTE,EAAa,GAAGtC,MAAM1G,OAAOG,KAAKmH,SAAW0B,EAAa,GAAGtC,MAAM1G,OAAOG,KAAKwJ,SAAzFlK,MAGI0B,EAAK0D,MAAM2F,EAAYjE,IAAKlF,GAC9BoJ,EAAYtJ,EAAK4D,SAAStC,GAAKtB,EAAK2D,SAASkE,EAAa,GAAGzC,IAAKyC,EAAa,GAAGzC,MAAOrF,OACpF,KACCwJ,EAAUvJ,EAAK4B,OAAO5B,EAAK2D,SAASkE,EAAa,GAAGzC,IAAKiE,EAAYjE,KAAMpG,KAAKoH,SAAShB,KACzFoE,EAAUxJ,EAAK4B,OAAO5B,EAAK2D,SAASkE,EAAa,GAAGzC,IAAKiE,EAAYjE,KAAMpG,KAAKqH,SAASjB,KAC/FkE,EAAYtJ,EAAKkB,gBAAgBqI,EAASC,GAAWD,EAAUC,MAE5DxJ,EAAK0B,YAAY4H,EAAWpJ,SACzB,IAAIqH,UAEL,IAAIjC,GAAYtG,KAAK8I,eAAgBwB,MAGvCG,kBAAA,SACLlE,EACA8D,EACAC,EACAI,EACAC,OAOIC,cARJF,IAAAA,GAAiB,GAGP1K,KAAKuJ,cAAchD,IAA7BjH,MACU+K,EAAY9D,MAAM1G,OAAOG,KAAK8I,iBAAxCxJ,MACUgL,EAAU/D,MAAM1G,OAAOG,KAAK8I,iBAAtCxJ,MACU0B,EAAKkB,gBAAgBoI,EAAUlE,IAAKiE,EAAYjE,MAA1D9G,MAGKoL,EAEE,CACOC,GAAZrL,UACMuL,EAAc1I,GAAewI,MAC9B3J,EAAK0D,MAAMmG,EAAa3J,GAY3B0J,EAAsBP,MAZY,KAC5BS,EAAQxI,GAAKtB,EAAK2D,SAAS3E,KAAKoH,SAAShB,IAAKpG,KAAKqH,SAASjB,MAC5D2E,EAAYzI,GAAKuI,MACnB7J,EAAK0B,YAAYoI,EAAOC,GAAY,KAChCzG,EAAYtD,EAAK2D,SAAS0F,EAAYjE,IAAKpF,EAAK4D,SAASkG,EAAOC,IAChExG,EAAcvD,EAAK2B,IAAI3B,EAAK2D,SAASmG,EAAOxJ,GAAOyJ,GACnDC,EAAehK,EAAK4B,OAAO0B,EAAWC,GAC5CqG,EAAsBP,EAAY1H,IAAI,IAAI2D,GAAYtG,KAAK8I,eAAgBkC,SAE3EJ,EAAsBP,QAb1BO,EAAsBP,SAoBjB,IAAI/D,GACTC,EACAvF,EAAK4B,OAAO5B,EAAK2D,SAAS2F,EAAUlE,IAAKpG,KAAK4J,UAAUrD,GAAOH,KAAMwE,EAAoBxE,qDArJpF,IAAII,GAAMxG,KAAKmH,OAAQnH,KAAKwJ,OAAQxJ,KAAK6I,aAAa,GAAGzC,IAAKpG,KAAK6I,aAAa,GAAGzC,gDAOnF,IAAII,GAAMxG,KAAKwJ,OAAQxJ,KAAKmH,OAAQnH,KAAK6I,aAAa,GAAGzC,IAAKpG,KAAK6I,aAAa,GAAGzC,4CAgBnFpG,KAAKmH,OAAOnI,8CAIZgB,KAAK6I,aAAa,GAAGtC,4CAIrBvG,KAAK6I,aAAa,GAAGtC,8CAIrBvG,KAAK6I,aAAa,2CAIlB7I,KAAK6I,aAAa,YCrGhBoC,yBAOQlE,EAAemE,EAAiBC,GACvCpE,EAAM5D,OAAS,GAAzB7D,UACMN,EAAkB+H,EAAM,GAAG/H,QAE/B+H,EAAMqE,OAAM,SAAAnE,UAAQA,EAAKjI,UAAYA,MADvCM,UAIM+L,EAAeH,EAAMI,QACjBvE,EAAM,GAAGwC,cAAc8B,IAAjC/L,WAC4B,IAAX6L,GAA0BpE,EAAMA,EAAM5D,OAAS,GAAGoG,cAAc4B,EAAOG,UAAxFhM,gBAEM4H,EAAgB,CAACmE,OACCtE,EAAMC,0BAAW,eAA1BC,OACPsE,EAAerE,QACXqE,EAAa1L,OAAOoH,EAAKE,SAAWoE,EAAa1L,OAAOoH,EAAKuC,SAAvElK,UACM6L,EAASI,EAAa1L,OAAOoH,EAAKE,QAAUF,EAAKuC,OAASvC,EAAKE,OACrED,EAAK9D,KAAK+H,QAGPpE,MAAQA,OACRG,KAAOA,OACPsE,SAAWhF,GAAMI,UAAU5G,WAC3BkL,MAAQA,OACRC,OAASA,MAAAA,EAAAA,EAAUjE,EAAKA,EAAK/D,OAAS,oDAIpCnD,KAAK+G,MAAM,GAAG/H,iBCtCnByM,GAAe,IAAIpH,GAAS7C,GAErBkK,mGACJ5G,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,GACxC/E,KAAK2E,SAAS8G,IAAc3G,cAAcC,EAAmBC,EAAQC,MAGvEQ,QAAA,SAAQD,EAA2BR,EAAiBC,mBAA5CO,IAAAA,EAAwB,GAC9BxF,KAAK2E,SAAS8G,IAAchG,QAAQD,EAAeR,EAAQC,OANzCZ,aC6BbsH,GAAsBC,EAAgBC,UAE1CD,EAAE9B,YAAYhE,SAASjG,OAAOgM,EAAE/B,YAAYhE,WAAtDxG,MACUsM,EAAE1B,aAAapE,SAASjG,OAAOgM,EAAE3B,aAAapE,WAAxDxG,MACIsM,EAAE1B,aAAarF,QAAQgH,EAAE3B,cACvB0B,EAAE9B,YAAYjF,QAAQgH,EAAE/B,aACnB,EAGL8B,EAAE9B,YAAYjH,SAASgJ,EAAE/B,cACnB,EAED,EAIL8B,EAAE1B,aAAarH,SAASgJ,EAAE3B,cACrB,GAEC,WAME4B,GAAgBF,EAAUC,OAClCE,EAASJ,GAAsBC,EAAGC,UACzB,IAAXE,EACKA,EAILH,EAAEI,YAAYnJ,SAASgJ,EAAEG,cACnB,EACCJ,EAAEI,YAAYtJ,YAAYmJ,EAAEG,aAC9B,EAIFJ,EAAE/E,MAAMK,KAAK/D,OAAS0I,EAAEhF,MAAMK,KAAK/D,OAe5C,SAAS8I,GAAcrE,EAAgC5I,UACjD4I,aAA0BtB,GAAoBsB,EAC9CA,EAAe9B,SAASzF,SAAiB,IAAIiG,GAAYnG,EAAQnB,GAAU4I,EAAexB,UAC9F9G,MAMF,IAAa4M,yBAgDQrF,EAAcd,EAAwBoG,QAClDtF,MAAQA,OACRsF,UAAYA,MAhIqDjC,EAClEkC,EAEAC,EA+HExD,EAA8B,IAAIyD,MAAMzF,EAAMK,KAAK/D,QACnDoJ,EAAoB,IAAID,MAAMzF,EAAME,MAAM5D,WAC5CgJ,IAAcrN,kBAAU0N,YAAa,CAC7BzG,EAAOD,SAASjG,OAAOgH,EAAMqE,QAAvC5L,MACAuJ,EAAa,GAAKoD,GAAclG,EAAQc,EAAM7H,aACzC,IAAIyN,EAAI,EAAGA,EAAI5F,EAAMK,KAAK/D,OAAS,EAAGsJ,IAAK,OACjC5F,EAAME,MAAM0F,GACa5C,gBAAgBhB,EAAa4D,IAA9CC,OACrB7D,EAAa4D,EAAI,QACjBF,EAAUE,GAAKC,OAEZ5C,YAAc/D,OACdmE,aAAerE,GAAeK,cAAcW,EAAMsE,OAAQtC,EAAaA,EAAa1F,OAAS,GAAGiD,SAChG,CACKL,EAAOD,SAASjG,OAAOgH,EAAMsE,SAAvC7L,MACAuJ,EAAaA,EAAa1F,OAAS,GAAK8I,GAAclG,EAAQc,EAAM7H,aAC/D,IAAIyN,EAAI5F,EAAMK,KAAK/D,OAAS,EAAGsJ,EAAI,EAAGA,IAAK,OACjC5F,EAAME,MAAM0F,EAAI,GACQtC,eAAetB,EAAa4D,IAA7CC,OACpB7D,EAAa4D,EAAI,QACjBF,EAAUE,EAAI,GAAKC,OAEhB5C,YAAcjE,GAAeK,cAAcW,EAAMqE,MAAOrC,EAAa,GAAGzC,UACxE8D,aAAenE,OAGjB4G,eAAiB,IAAInG,GACxBxG,KAAK8J,YAAYhE,SACjB9F,KAAKkK,aAAapE,SAClB9F,KAAK8J,YAAY1D,IACjBpG,KAAKkK,aAAa9D,UAEfwG,aAAepG,GAAMI,UAAU,IAAIqE,GAAMsB,EAAW1F,EAAMqE,aAC1Dc,aAnKiE9B,EAmKElK,KAAKkK,aAhKzEmC,GAFAD,EAkKkCvF,EAAM2E,SAlKlBpF,IAAIzB,SAkKwB3E,KAAK8J,YAlKR1D,MAEzBxB,SAASsF,EAAa9D,KAAKxD,OAAOwJ,GACvD,IAAIV,GAAQW,EAAS/H,UAAW+H,EAAS9H,gBA6GlCsI,QAAP,SAAehG,EAAciG,UAC3B,IAAIZ,EAAMrF,EAAOiG,EAAUhO,kBAAU0N,gBAQhCO,SAAP,SAAgBlG,EAAcmG,UAC5B,IAAId,EAAMrF,EAAOmG,EAAWlO,kBAAUmO,0CA+CxCC,iBAAA,SAAiBC,MACXA,EAAkBtK,SAAS3B,IAAtC5B,MACIU,KAAKmM,YAAcrN,kBAAUmO,oBACxBjN,KAAKkK,iBAENkD,EAA4B,IAAI/I,GAASlD,GAC5CwB,IAAIwK,GACJ3I,SACAG,SAAS3E,KAAKkK,aAAa9D,KAAKf,gBAC5BQ,GAAeK,cAAclG,KAAKkK,aAAapE,SAAUsH,MAQ7DC,gBAAA,SAAgBF,MACVA,EAAkBtK,SAAS3B,IAAtC5B,MACIU,KAAKmM,YAAcrN,kBAAU0N,mBACxBxM,KAAK8J,gBAENwD,EAA2B,IAAIjJ,GAASlD,GAAKwB,IAAIwK,GAAmBxI,SAAS3E,KAAK8J,YAAY1D,KAAKf,gBAClGQ,GAAeK,cAAclG,KAAK8J,YAAYhE,SAAUwH,MAmBrDC,iBAAP,SACLxG,EACAyG,EACAC,IAGAC,EACAC,EACAC,oBAJuD,SAArDC,cAAAA,aAAgB,QAAGC,QAAAA,aAAU,aAE/BJ,IAAAA,EAAuB,aACvBC,IAAAA,EAAmCH,YACnCI,IAAAA,EAAsB,IAEZ7G,EAAM5D,OAAS,GAAzB7D,MACUwO,EAAU,GAApBxO,MACUqO,IAAqBH,GAAoBE,EAAavK,OAAS,GAAzE7D,cAEMwN,EAAWb,GAAcuB,EAAkBA,EAAiB1H,SAAS9G,SAErE+O,EAAWN,EAAYnC,QACpBmB,EAAI,EAAGA,EAAI1F,EAAM5D,OAAQsJ,IAAK,KAC/BxF,EAAOF,EAAM0F,OAEdxF,EAAKE,OAAOtH,OAAOiN,EAASvG,QAAWU,EAAKuC,OAAO3J,OAAOiN,EAASvG,UACpEU,EAAKG,SAASvC,QAAQ3D,KAAS+F,EAAKI,SAASxC,QAAQ3D,QAErD8L,aAEAA,EAAa/F,EAAK4C,gBAAgBiD,MACpC,MAAOnN,MAEHA,EAAMqO,8CAGJrO,KAGJqN,EAAUzG,MAAM1G,OAAOkO,GACzBhL,GACE6K,EACA,IAAI1B,EACF,IAAIjB,aAAUyC,GAAczG,IAAO0G,EAAiB7H,SAAU2H,GAC9DE,EACA7O,kBAAU0N,aAEZqB,EACA/B,SAEG,GAAIgC,EAAU,GAAK/G,EAAM5D,OAAS,EAAG,KACpC8K,EAAyBlH,EAAMO,MAAM,EAAGmF,GAAGyB,OAAOnH,EAAMO,MAAMmF,EAAI,EAAG1F,EAAM5D,SAGjF+I,EAAMqB,iBACJU,EACAjB,EACAS,EACA,CACEI,cAAAA,EACAC,QAASA,EAAU,aAEjBJ,GAAczG,IAClB0G,EACAC,YAKCA,KAkBKO,kBAAP,SACLpH,EACAqH,EACAC,IAGAX,EACAY,EACAV,oBAJuD,SAArDC,cAAAA,aAAgB,QAAGC,QAAAA,aAAU,aAE/BJ,IAAAA,EAAuB,aACvBY,IAAAA,EAAoCD,YACpCT,IAAAA,EAAsB,IAEZ7G,EAAM5D,OAAS,GAAzB7D,MACUwO,EAAU,GAApBxO,MACUgP,IAAsBD,GAAqBX,EAAavK,OAAS,GAA3E7D,UACMN,EAA+BqP,EAAkBvI,SAAS9G,aAM1CkK,IAAZlK,GAAVM,cAEM0N,EAAYf,GAAcoC,EAAmBrP,GAC7CuP,EAAUH,EAAW9C,QAClBmB,EAAI,EAAGA,EAAI1F,EAAM5D,OAAQsJ,IAAK,KAC/BxF,EAAOF,EAAM0F,OAEdxF,EAAKE,OAAOtH,OAAOmN,EAAUzG,QAAWU,EAAKuC,OAAO3J,OAAOmN,EAAUzG,UACtEU,EAAKG,SAASvC,QAAQ3D,KAAS+F,EAAKI,SAASxC,QAAQ3D,QAErD4L,aAEAA,EAAY7F,EAAKkD,eAAe6C,MAClC,MAAOrN,MAEHA,EAAM6O,2CAGJ7O,KAGJmN,EAASvG,MAAM1G,OAAO0O,GACxBxL,GACE6K,EACA,IAAI1B,EACF,IAAIjB,IAAOhE,UAASyG,GAAeU,EAAYE,EAAkBxI,UACjEwI,EACAxP,kBAAUmO,cAEZY,EACA/B,SAEG,GAAIgC,EAAU,GAAK/G,EAAM5D,OAAS,EAAG,KACpC8K,EAAyBlH,EAAMO,MAAM,EAAGmF,GAAGyB,OAAOnH,EAAMO,MAAMmF,EAAI,EAAG1F,EAAM5D,SAGjF+I,EAAMiC,kBACJF,EACAG,EACAtB,EACA,CACEe,cAAAA,EACAC,QAASA,EAAU,IAEpB7G,UAASyG,GACVY,EACAV,YAKCA,QChVX,SAASa,GAAM7G,cACDA,EAAexB,IAAI/D,SAAS,IAG1C,OAKsBqM,qCAUNC,mBAAP,SAA0BC,EAAcC,OACvCC,EAAWF,EAAM9E,YAAYhE,SAASzF,SACtC0O,EAAYH,EAAM1E,aAAapE,SAASzF,SAElCyO,GAAYC,GAAxBzP,MACUuP,EAAQG,IAAM,GAAxB1P,UASI2P,EACAC,EACAnN,EATEoN,WV5D8B1P,cAETC,aAAWD,GAGtC,MAAOE,GACPL,OUsDmBE,CAAwBqP,EAAQO,WAC7CtC,EAAmB2B,GAAMG,EAAMvB,gBAAgBwB,EAAQQ,kBACvDrC,EAAoByB,GAAMG,EAAM1B,iBAAiB2B,EAAQQ,kBACzDnI,EAAiB0H,EAAM/H,MAAMK,KAAKoI,KAAI,SAAA/I,UAASA,EAAM9G,WACrD8P,QAAiBC,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAAQd,EAAQG,KAAK3M,SAAS,IACjFuN,EAAmBC,QAAQhB,EAAQiB,sBAKjClB,EAAMzC,gBACPrN,kBAAU0N,YACTsC,GACFG,EAAaW,EAAmB,qDAAuD,wBAEvFV,EAAO,CAAClC,EAAW9F,EAAMiI,EAAII,GAC7BxN,EAAQ+K,GACCiC,GACTE,EAAaW,EAAmB,qDAAuD,wBAEvFV,EAAO,CAACpC,EAAUE,EAAW9F,EAAMiI,EAAII,GACvCxN,EA3CO,QA6CPkN,EAAaW,EACT,wDACA,2BAEJV,EAAO,CAACpC,EAAUE,EAAW9F,EAAMiI,EAAII,GACvCxN,EAlDO,kBAqDNjD,kBAAUmO,aACF2C,GAAXtQ,MACIwP,GACFG,EAAa,wBAEbC,EAAO,CAAClC,EAAW9F,EAAMiI,EAAII,GAC7BxN,EAAQ+K,GACCiC,GACTE,EAAa,wBAEbC,EAAO,CAAClC,EAAWF,EAAU5F,EAAMiI,EAAII,GACvCxN,EAhEO,QAkEPkN,EAAa,2BAEbC,EAAO,CAAClC,EAAWF,EAAU5F,EAAMiI,EAAII,GACvCxN,EArEO,aAyEN,CACLkN,WAAAA,EACAC,KAAAA,EACAnN,MAAAA,+RCrHFgO,YACDzR,gBAAQE,SAAU,8CAC6B,OAO5BwR,qCAcAC,wBAClBjR,EACAS,EACAyQ,EACAhR,EACAC,0BAEMgR,UAaC,IAAIvQ,EAAMZ,EAASS,EAAS0Q,EAAgBjR,EAAQC,aAjB3D+Q,IAAAA,EAAWE,qBAAmBC,aAAWrR,WAKe,2BAA/C+Q,2BAAAO,EAAuBtR,uBAAvBuR,EAAkC9Q,+BACrCsQ,GAAqB/Q,GAASS,oBACxB,IAAI+Q,WAAS/Q,EAASgR,GAAOP,GAAUjR,WAAWyR,MAAK,SAACzR,oBAC5D8Q,QACKA,WACF/Q,kBACI+Q,uBAAAY,EAAuB3R,WACzBS,GAAUR,UAGRA,qDAWG2R,uBAClB7H,EACAC,EACAkH,gBAAAA,IAAAA,EAAWE,qBAAmBC,aAAWtH,EAAO/J,WAEtC+J,EAAO/J,UAAYgK,EAAOhK,SAApCM,UACMG,EAAUiJ,GAAKhJ,WAAWqJ,EAAQC,0BACH,IAAIwH,WAAS/Q,EAASoR,EAAeC,IAAKZ,GAAUa,qCAAlFC,OAAWC,OACZC,EAAWnI,EAAO9I,YAAY+I,GAAU,CAACgI,EAAWC,GAAa,CAACA,EAAWD,UAC5E,IAAItI,GAAK,IAAIpC,GAAYyC,EAAQmI,EAAS,IAAK,IAAI5K,GAAY0C,EAAQkI,EAAS,mwBClEzD,gBAChCC,IAAAA,eACApI,IAAAA,OACAC,IAAAA,SAMyBD,EAAO9I,YAAY+I,GAAU,CAACD,EAAQC,GAAU,CAACA,EAAQD,UAC3EK,oBACL+H,EACA9H,YAAU,CAAC,SAAU,CAACC,OAAK,CAAC,UAAW,WAAY,MAAQ7J,aAAgBA,YAC3EqB,oClBiC2BsQ,EAAqBC,UAC9CD,aAAqBxR,GAASyR,aAAqBzR,EAC9CwR,EAAUvR,OAAOwR,KACfD,aAAqBxR,GAErByR,aAAqBzR,GAGvBwR,IAAcC"}