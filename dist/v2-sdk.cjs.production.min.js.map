{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/enums/ChainId.ts","../src/constants/addresses.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/natives/Avalanche.ts","../src/entities/natives/Binance.ts","../src/entities/natives/Celo.ts","../src/entities/natives/Ether.ts","../src/entities/natives/Fantom.ts","../src/entities/natives/Harmony.ts","../src/entities/natives/Heco.ts","../src/entities/natives/Matic.ts","../src/entities/natives/Movr.ts","../src/entities/natives/Okex.ts","../src/entities/natives/xDai.ts","../src/entities/natives/Palm.ts","../src/entities/natives/Fuse.ts","../src/constants/index.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/functions/computePairAddress.ts","../src/errors.ts","../src/utils.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/price.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  FUSE = 122\n}\n","import { ChainId } from '../enums/ChainId'\nimport { AddressMap } from '../types/AddressMap'\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664'\n}\n\nexport const FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.BSC]: '0x86325Af801Eb418eCE6Ff2Bb8F4C6322543858E4',\n  [ChainId.MATIC]: '0xaB9A2CB71E526ADD626747fD4D738f80572233D2',\n  [ChainId.MATIC_TESTNET]: '0xaB9A2CB71E526ADD626747fD4D738f80572233D2',\n  [ChainId.BSC_TESTNET]: '0x7f86C595905506B9cab69Af085d969F2a2f06adC'\n}\n\nexport const ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.BSC]: '0x5c75d3A4342f4874b33DE6E0609535Da0b9e4C5B',\n  [ChainId.MATIC]: '0x8a13265913EF40C4EA6D8519c2281c2A1fC5e93d',\n  [ChainId.MATIC_TESTNET]: '0x037D2Ab45B62aaf282473c20425B8EA1eF3d4dDd',\n  [ChainId.BSC_TESTNET]: '0xAED59cDE6f480481d0096440cDBe6F092E96b336'\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n  [ChainId.AVALANCHE]: '0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15'\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: WETH9_ADDRESS[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.MATIC_TESTNET]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  [ChainId.MOONBEAM_TESTNET]: '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629'\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\nimport { ChainId } from '../enums/ChainId'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: ChainId\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../enums'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { USDC_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\n\nimport { ChainId } from '../enums'\nimport { Token } from '../entities/Token'\nimport { TokenMap } from '../types/TokenMap'\n\nexport const USDC: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, USDC_ADDRESS[ChainId.MAINNET], 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin')\n}\n\nexport const WETH9: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, WETH9_ADDRESS[ChainId.MAINNET], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether')\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    'WMOVR',\n    'Wrapped Moonriver'\n  ),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse')\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fuse extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FUSE', 'Fuse')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fuse } = {}\n\n  public static onChain(chainId: number): Fuse {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { ChainId } from '../enums/ChainId'\n\nexport * from './addresses'\nexport * from './natives'\nexport * from './numbers'\nexport * from './tokens'\n\nimport JSBI from 'jsbi'\nimport { AddressMap } from 'types/AddressMap'\n\nexport const INIT_CODE_HASH: AddressMap = {\n  [ChainId.BSC]: '0xd56c41afae4622ccce0d01f31c6837f59840ab1b102b7a97103a5d99671acd81',\n  [ChainId.MATIC]: '0x6d5fdaab3371d5d158f62abbc39e801a20feab6444a5750398a310ff3730c659',\n  [ChainId.MATIC_TESTNET]: '0x6d5fdaab3371d5d158f62abbc39e801a20feab6444a5750398a310ff3730c659',\n  [ChainId.BSC_TESTNET]: '0x6d5fdaab3371d5d158f62abbc39e801a20feab6444a5750398a310ff3730c659'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _998 = JSBI.BigInt(998)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","import {\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Fuse,\n  Harmony,\n  Heco,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  xDai\n} from '../entities/natives'\n\nimport { ChainId } from '../enums'\nexport const NATIVE = {\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE)\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[token0.chainId]\n  )\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { getAddress } from '@ethersproject/address'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport { ONE, SolidityType, SOLIDITY_TYPE_MAXIMA, THREE, TWO, ZERO } from './constants'\nimport { BigintIsh } from './types'\n\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt((bigintIsh as any).toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { Rounding } from '../../enums'\nimport { BigintIsh } from '../../types'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import _Big from 'big.js'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\nimport { SolidityType, SOLIDITY_TYPE_MAXIMA } from '../../constants'\nimport { Rounding } from '../../enums/Rounding'\nimport { BigintIsh } from '../../types'\nimport { Currency } from '../Currency'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount(currency: Currency, rawAmount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount(currency: Currency, numerator: BigintIsh, denominator: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, SOLIDITY_TYPE_MAXIMA[SolidityType.uint256]), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { TEN } from '../../constants'\nimport { Rounding } from '../../enums'\nimport { BigintIsh } from '../../types'\nimport { Currency } from '../Currency'\nimport { Route } from '../route'\nimport { CurrencyAmount } from './currencyAmount'\nimport { Fraction } from './fraction'\n\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigintIsh } from '../../types'\nimport { Token } from '../Token'\nimport { CurrencyAmount } from './currencyAmount'\n\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(token, numerator, denominator)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    const added = super.add(other)\n    return new TokenAmount(this.token, added.numerator, added.denominator)\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    const subtracted = super.subtract(other)\n    return new TokenAmount(this.token, subtracted.numerator, subtracted.denominator)\n  }\n}\n","import { computePairAddress } from '../functions'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { FACTORY_ADDRESSES, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _998 } from '../constants'\nimport { ChainId } from '../enums'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\nimport { BigintIsh } from '../types'\nimport { parseBigintIsh, sqrt } from '../utils'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Token } from './Token'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESSES[tokenA.chainId],\n      tokenA,\n      tokenB\n    })\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _998)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.token).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _998)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { ChainId } from '../enums'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './Currency'\nimport { Token } from './Token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { _100 } from '../../constants'\nimport { Rounding } from '../../enums'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { WNATIVE } from '../constants/tokens'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../constants'\nimport { ChainId, TradeType } from '../enums'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.quotient)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.quotient).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency.isNative) return new TokenAmount(WNATIVE[chainId], currencyAmount.quotient)\n  invariant(false, 'CURRENCY')\n}\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n      this.inputAmount = amount\n      this.outputAmount = CurrencyAmount.fromRawAmount(route.output, tokenAmounts[tokenAmounts.length - 1].quotient)\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n      this.inputAmount = CurrencyAmount.fromRawAmount(route.input, tokenAmounts[0].quotient)\n      this.outputAmount = amount\n    }\n\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n      // return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn);\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = wrappedAmount(currencyAmountIn, currencyAmountIn.currency.chainId)\n\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined = currencyAmountOut.currency.chainId\n    // currencyAmountOut instanceof TokenAmount\n    //   ? currencyAmountOut.token.chainId\n    //   : currencyIn instanceof Token\n    //   ? currencyIn.chainId\n    //   : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './enums'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const nativeIn = trade.inputAmount.currency.isNative\n    const nativeOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(nativeIn && nativeOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (nativeIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (nativeOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (nativeIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (nativeOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport ILuckyswapPair from '@luckyswap/v2-core/build/LuckyswapPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './enums'\nimport { Token } from './entities/Token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, ILuckyswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","USDC_ADDRESS","MAINNET","ROPSTEN","KOVAN","MATIC","FANTOM","BSC","HARMONY","HECO","OKEX","XDAI","ARBITRUM","AVALANCHE","FACTORY_ADDRESSES","MATIC_TESTNET","BSC_TESTNET","ROUTER_ADDRESSES","WETH9_ADDRESS","RINKEBY","GÖRLI","ARBITRUM_TESTNET","WNATIVE_ADDRESS","FANTOM_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","OKEX_TESTNET","CELO","PALM","MOONRIVER","FUSE","Rounding","TradeType","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","NativeCurrency","validateAndParseAddress","address","getAddress","error","Token","equals","other","isToken","this","sortsBefore","toLowerCase","USDC","WETH9","WNATIVE","Avalanche","_NativeCurrency","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","SolidityType","NATIVE","MaxUint256","JSBI","BigInt","INIT_CODE_HASH","MINIMUM_LIQUIDITY","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_998","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","computePairAddress","factoryAddress","tokenA","tokenB","token0","getCreate2Address","keccak256","pack","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","parseBigintIsh","bigintIsh","toString","sqrt","y","value","solidityType","greaterThanOrEqual","lessThanOrEqual","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","_Fraction","toExact","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","result","adjusted","TokenAmount","token","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","wrappedInput","wrapped","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","Trade","amount","tradeType","exactQuote","slippage","Array","nextPairs","EXACT_INPUT","i","nextPair","executionPrice","nextMidPrice","raw","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","undefined","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","nativeIn","nativeOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","ILuckyswapPair","abi","getReserves","reserves0","reserves1","balances","currencyA","currencyB"],"mappings":"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"}