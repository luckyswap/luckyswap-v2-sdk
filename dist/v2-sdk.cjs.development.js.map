{"version":3,"file":"v2-sdk.cjs.development.js","sources":["../src/enums/ChainId.ts","../src/constants/addresses.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/natives/Avalanche.ts","../src/entities/natives/Binance.ts","../src/entities/natives/Celo.ts","../src/entities/natives/Ether.ts","../src/entities/natives/Fantom.ts","../src/entities/natives/Harmony.ts","../src/entities/natives/Heco.ts","../src/entities/natives/Matic.ts","../src/entities/natives/Movr.ts","../src/entities/natives/Okex.ts","../src/entities/natives/xDai.ts","../src/entities/natives/Palm.ts","../src/entities/natives/Fuse.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/index.ts","../src/functions/computePairAddress.ts","../src/errors.ts","../src/utils.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/price.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  FUSE = 122\n}\n","import { ChainId } from '../enums/ChainId'\nimport { AddressMap } from '../types/AddressMap'\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664'\n}\n\nexport const FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.BSC]: '0x86325Af801Eb418eCE6Ff2Bb8F4C6322543858E4',\n  [ChainId.MATIC]: '0xaB9A2CB71E526ADD626747fD4D738f80572233D2',\n  [ChainId.MATIC_TESTNET]: '0xaB9A2CB71E526ADD626747fD4D738f80572233D2',\n  [ChainId.BSC_TESTNET]: '0x7f86C595905506B9cab69Af085d969F2a2f06adC'\n}\n\nexport const ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.BSC]: '0x5c75d3A4342f4874b33DE6E0609535Da0b9e4C5B',\n  [ChainId.MATIC]: '0x8a13265913EF40C4EA6D8519c2281c2A1fC5e93d',\n  [ChainId.MATIC_TESTNET]: '0x037D2Ab45B62aaf282473c20425B8EA1eF3d4dDd',\n  [ChainId.BSC_TESTNET]: '0xAED59cDE6f480481d0096440cDBe6F092E96b336'\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n  [ChainId.AVALANCHE]: '0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15'\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: WETH9_ADDRESS[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.MATIC_TESTNET]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  [ChainId.MOONBEAM_TESTNET]: '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629'\n}\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\nimport { ChainId } from '../enums/ChainId'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: ChainId\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../enums'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { USDC_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\n\nimport { ChainId } from '../enums'\nimport { Token } from '../entities/Token'\nimport { TokenMap } from '../types/TokenMap'\n\nexport const USDC: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, USDC_ADDRESS[ChainId.MAINNET], 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin')\n}\n\nexport const WETH9: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, WETH9_ADDRESS[ChainId.MAINNET], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether')\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    'WMOVR',\n    'Wrapped Moonriver'\n  ),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse')\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fuse extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FUSE', 'Fuse')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fuse } = {}\n\n  public static onChain(chainId: number): Fuse {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import {\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Fuse,\n  Harmony,\n  Heco,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  xDai\n} from '../entities/natives'\n\nimport { ChainId } from '../enums'\nexport const NATIVE = {\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE)\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import { ChainId } from '../enums/ChainId'\n\nexport * from './addresses'\nexport * from './natives'\nexport * from './numbers'\nexport * from './tokens'\n\nimport JSBI from 'jsbi'\nimport { AddressMap } from 'types/AddressMap'\n\nexport const INIT_CODE_HASH: AddressMap = {\n  [ChainId.BSC]: '0xd56c41afae4622ccce0d01f31c6837f59840ab1b102b7a97103a5d99671acd81',\n  [ChainId.MATIC]: '0x6d5fdaab3371d5d158f62abbc39e801a20feab6444a5750398a310ff3730c659',\n  [ChainId.MATIC_TESTNET]: '0x6d5fdaab3371d5d158f62abbc39e801a20feab6444a5750398a310ff3730c659',\n  [ChainId.BSC_TESTNET]: '0x6d5fdaab3371d5d158f62abbc39e801a20feab6444a5750398a310ff3730c659'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _998 = JSBI.BigInt(998)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[token0.chainId]\n  )\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { getAddress } from '@ethersproject/address'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport { ONE, SolidityType, SOLIDITY_TYPE_MAXIMA, THREE, TWO, ZERO } from './constants'\nimport { BigintIsh } from './types'\n\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt((bigintIsh as any).toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { Rounding } from '../../enums'\nimport { BigintIsh } from '../../types'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import _Big from 'big.js'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\nimport { SolidityType, SOLIDITY_TYPE_MAXIMA } from '../../constants'\nimport { Rounding } from '../../enums/Rounding'\nimport { BigintIsh } from '../../types'\nimport { Currency } from '../Currency'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount(currency: Currency, rawAmount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount(currency: Currency, numerator: BigintIsh, denominator: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, SOLIDITY_TYPE_MAXIMA[SolidityType.uint256]), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { TEN } from '../../constants'\nimport { Rounding } from '../../enums'\nimport { BigintIsh } from '../../types'\nimport { Currency } from '../Currency'\nimport { Route } from '../route'\nimport { CurrencyAmount } from './currencyAmount'\nimport { Fraction } from './fraction'\n\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigintIsh } from '../../types'\nimport { Token } from '../Token'\nimport { CurrencyAmount } from './currencyAmount'\n\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(token, numerator, denominator)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    const added = super.add(other)\n    return new TokenAmount(this.token, added.numerator, added.denominator)\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    const subtracted = super.subtract(other)\n    return new TokenAmount(this.token, subtracted.numerator, subtracted.denominator)\n  }\n}\n","import { computePairAddress } from '../functions'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { FACTORY_ADDRESSES, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _998 } from '../constants'\nimport { ChainId } from '../enums'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\nimport { BigintIsh } from '../types'\nimport { parseBigintIsh, sqrt } from '../utils'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Token } from './Token'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESSES[tokenA.chainId],\n      tokenA,\n      tokenB\n    })\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _998)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.token).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _998)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { ChainId } from '../enums'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './Currency'\nimport { Token } from './Token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { _100 } from '../../constants'\nimport { Rounding } from '../../enums'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { WNATIVE } from '../constants/tokens'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../constants'\nimport { ChainId, TradeType } from '../enums'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.quotient)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.quotient).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency.isNative) return new TokenAmount(WNATIVE[chainId], currencyAmount.quotient)\n  invariant(false, 'CURRENCY')\n}\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n      this.inputAmount = amount\n      this.outputAmount = CurrencyAmount.fromRawAmount(route.output, tokenAmounts[tokenAmounts.length - 1].quotient)\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n      this.inputAmount = CurrencyAmount.fromRawAmount(route.input, tokenAmounts[0].quotient)\n      this.outputAmount = amount\n    }\n\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n      // return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn);\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = wrappedAmount(currencyAmountIn, currencyAmountIn.currency.chainId)\n\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined = currencyAmountOut.currency.chainId\n    // currencyAmountOut instanceof TokenAmount\n    //   ? currencyAmountOut.token.chainId\n    //   : currencyIn instanceof Token\n    //   ? currencyIn.chainId\n    //   : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './enums'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const nativeIn = trade.inputAmount.currency.isNative\n    const nativeOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(nativeIn && nativeOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (nativeIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (nativeOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (nativeIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (nativeOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport ILuckyswapPair from '@luckyswap/v2-core/build/LuckyswapPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './enums'\nimport { Token } from './entities/Token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, ILuckyswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","USDC_ADDRESS","MAINNET","ROPSTEN","KOVAN","MATIC","FANTOM","BSC","HARMONY","HECO","OKEX","XDAI","ARBITRUM","AVALANCHE","FACTORY_ADDRESSES","MATIC_TESTNET","BSC_TESTNET","ROUTER_ADDRESSES","WETH9_ADDRESS","RINKEBY","GÖRLI","ARBITRUM_TESTNET","WNATIVE_ADDRESS","FANTOM_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","OKEX_TESTNET","CELO","PALM","MOONRIVER","FUSE","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","NativeCurrency","Rounding","TradeType","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","Token","equals","other","isToken","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","USDC","WETH9","WNATIVE","Avalanche","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","NATIVE","MaxUint256","JSBI","BigInt","INIT_CODE_HASH","MINIMUM_LIQUIDITY","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_998","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","computePairAddress","factoryAddress","tokenA","tokenB","token0","token1","getCreate2Address","keccak256","pack","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","lessThanOrEqual","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","result","adjusted","TokenAmount","token","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","involvesToken","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","wrappedInput","wrapped","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","raw","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","Trade","amount","tradeType","Array","nextPairs","EXACT_INPUT","nextPair","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","undefined","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","nativeIn","nativeOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","ILuckyswapPair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}