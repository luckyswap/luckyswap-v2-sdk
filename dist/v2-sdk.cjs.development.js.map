{"version":3,"file":"v2-sdk.cjs.development.js","sources":["../src/enums/ChainId.ts","../src/constants/addresses.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/natives/Avalanche.ts","../src/entities/natives/Binance.ts","../src/entities/natives/Celo.ts","../src/entities/natives/Ether.ts","../src/entities/natives/Fantom.ts","../src/entities/natives/Harmony.ts","../src/entities/natives/Heco.ts","../src/entities/natives/Matic.ts","../src/entities/natives/Movr.ts","../src/entities/natives/Okex.ts","../src/entities/natives/xDai.ts","../src/entities/natives/Palm.ts","../src/entities/natives/Fuse.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/index.ts","../src/utils.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/price.ts","../src/entities/fractions/tokenAmount.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/functions/computePairAddress.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  FUSE = 122\n}\n","import { ChainId } from '../enums/ChainId'\nimport { AddressMap } from '../types/AddressMap'\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664'\n}\n\nexport const FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x86325Af801Eb418eCE6Ff2Bb8F4C6322543858E4',\n  [ChainId.MATIC]: '0xaB9A2CB71E526ADD626747fD4D738f80572233D2',\n  [ChainId.MATIC_TESTNET]: '0xaB9A2CB71E526ADD626747fD4D738f80572233D2',\n  [ChainId.BSC_TESTNET]: '0x7f86C595905506B9cab69Af085d969F2a2f06adC'\n}\n\nexport const ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5c75d3A4342f4874b33DE6E0609535Da0b9e4C5B',\n  [ChainId.MATIC]: '0x8a13265913EF40C4EA6D8519c2281c2A1fC5e93d',\n  [ChainId.MATIC_TESTNET]: '0x037D2Ab45B62aaf282473c20425B8EA1eF3d4dDd',\n  [ChainId.BSC_TESTNET]: '0xAED59cDE6f480481d0096440cDBe6F092E96b336'\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n  [ChainId.AVALANCHE]: '0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15'\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: WETH9_ADDRESS[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.MATIC_TESTNET]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  [ChainId.MOONBEAM_TESTNET]: '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629'\n}\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\nimport { ChainId } from '../enums/ChainId'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: ChainId\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../enums'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { USDC_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\n\nimport { ChainId } from '../enums'\nimport { Token } from '../entities/Token'\nimport { TokenMap } from '../types/TokenMap'\n\nexport const USDC: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, USDC_ADDRESS[ChainId.MAINNET], 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin')\n}\n\nexport const WETH9: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, WETH9_ADDRESS[ChainId.MAINNET], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether')\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    'WMOVR',\n    'Wrapped Moonriver'\n  ),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse')\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fuse extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FUSE', 'Fuse')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fuse } = {}\n\n  public static onChain(chainId: number): Fuse {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import {\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Fuse,\n  Harmony,\n  Heco,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  xDai\n} from '../entities/natives'\n\nimport { ChainId } from '../enums'\nexport const NATIVE = {\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE)\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import { ChainId } from '../enums/ChainId'\n\nexport * from './addresses'\nexport * from './natives'\nexport * from './numbers'\nexport * from './tokens'\n\nimport JSBI from 'jsbi'\nimport { AddressMap } from 'types/AddressMap'\n\nexport const INIT_CODE_HASH: AddressMap = {\n  [ChainId.MAINNET]: '0xd56c41afae4622ccce0d01f31c6837f59840ab1b102b7a97103a5d99671acd81',\n  [ChainId.MATIC]: '0x6d5fdaab3371d5d158f62abbc39e801a20feab6444a5750398a310ff3730c659',\n  [ChainId.MATIC_TESTNET]: '0x6d5fdaab3371d5d158f62abbc39e801a20feab6444a5750398a310ff3730c659',\n  [ChainId.BSC_TESTNET]: '0x6d5fdaab3371d5d158f62abbc39e801a20feab6444a5750398a310ff3730c659'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _998 = JSBI.BigInt(998)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","import { getAddress } from '@ethersproject/address'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport { ONE, SolidityType, SOLIDITY_TYPE_MAXIMA, THREE, TWO, ZERO } from './constants'\nimport { BigintIsh } from './types'\n\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt((bigintIsh as any).toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { Rounding } from '../../enums'\nimport { BigintIsh } from '../../types'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import _Big from 'big.js'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\nimport { SolidityType, SOLIDITY_TYPE_MAXIMA } from '../../constants'\nimport { Rounding } from '../../enums/Rounding'\nimport { BigintIsh } from '../../types'\nimport { Currency } from '../Currency'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount(currency: Currency, rawAmount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount(currency: Currency, numerator: BigintIsh, denominator: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, SOLIDITY_TYPE_MAXIMA[SolidityType.uint256]), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { TEN } from '../../constants'\nimport { Rounding } from '../../enums'\nimport { BigintIsh } from '../../types'\nimport { Currency } from '../Currency'\nimport { Route } from '../route'\nimport { CurrencyAmount } from './currencyAmount'\nimport { Fraction } from './fraction'\n\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigintIsh } from '../../types'\nimport { Token } from '../Token'\nimport { CurrencyAmount } from './currencyAmount'\n\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(token, numerator, denominator)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    const added = super.add(other)\n    return new TokenAmount(this.token, added.numerator, added.denominator)\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    const subtracted = super.subtract(other)\n    return new TokenAmount(this.token, subtracted.numerator, subtracted.denominator)\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { FACTORY_ADDRESSES } from './../constants'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { INIT_CODE_HASH, MINIMUM_LIQUIDITY, ZERO, ONE, FIVE, _998, _1000 } from '../constants'\n\nimport { BigintIsh } from '../types'\nimport { ChainId } from '../enums'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './Token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    const factoryAddress = FACTORY_ADDRESSES[tokenA.chainId]\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            factoryAddress,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH[tokens[0].chainId]\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _998)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.token).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _998)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { ChainId } from '../enums'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './Currency'\nimport { Token } from './Token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { _100 } from '../../constants'\nimport { Rounding } from '../../enums'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { WNATIVE } from '../constants/tokens'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../constants'\nimport { ChainId, TradeType } from '../enums'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.quotient)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.quotient).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency.isNative) return new TokenAmount(WNATIVE[chainId], currencyAmount.quotient)\n  invariant(false, 'CURRENCY')\n}\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n      this.inputAmount = amount\n      this.outputAmount = CurrencyAmount.fromRawAmount(route.output, tokenAmounts[tokenAmounts.length - 1].quotient)\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n      this.inputAmount = CurrencyAmount.fromRawAmount(route.input, tokenAmounts[0].quotient)\n      this.outputAmount = amount\n    }\n\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n      // return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn);\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = wrappedAmount(currencyAmountIn, currencyAmountIn.currency.chainId)\n\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined = currencyAmountOut.currency.chainId\n    // currencyAmountOut instanceof TokenAmount\n    //   ? currencyAmountOut.token.chainId\n    //   : currencyIn instanceof Token\n    //   ? currencyIn.chainId\n    //   : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[token0.chainId]\n  )\n}\n","import { TradeType } from './enums'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const nativeIn = trade.inputAmount.currency.isNative\n    const nativeOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(nativeIn && nativeOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (nativeIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (nativeOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (nativeIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (nativeOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport ILuckyswapPair from '@luckyswap/v2-core/build/LuckyswapPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './enums'\nimport { Token } from './entities/Token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, ILuckyswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","USDC_ADDRESS","MAINNET","ROPSTEN","KOVAN","MATIC","FANTOM","BSC","HARMONY","HECO","OKEX","XDAI","ARBITRUM","AVALANCHE","FACTORY_ADDRESSES","MATIC_TESTNET","BSC_TESTNET","ROUTER_ADDRESSES","WETH9_ADDRESS","RINKEBY","GÖRLI","ARBITRUM_TESTNET","WNATIVE_ADDRESS","FANTOM_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","OKEX_TESTNET","CELO","PALM","MOONRIVER","FUSE","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","NativeCurrency","Rounding","TradeType","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","Token","equals","other","isToken","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","USDC","WETH9","WNATIVE","Avalanche","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","NATIVE","MaxUint256","JSBI","BigInt","INIT_CODE_HASH","MINIMUM_LIQUIDITY","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_998","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","lessThanOrEqual","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","result","adjusted","TokenAmount","token","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","InsufficientInputAmountError","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","factoryAddress","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","wrappedInput","wrapped","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","raw","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","Trade","amount","tradeType","Array","nextPairs","EXACT_INPUT","nextPair","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","computePairAddress","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","nativeIn","nativeOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","ILuckyswapPair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}