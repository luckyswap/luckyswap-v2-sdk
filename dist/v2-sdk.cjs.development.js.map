{"version":3,"file":"v2-sdk.cjs.development.js","sources":["../src/enums/ChainId.ts","../src/constants/addresses.ts","../src/entities/AbstractCurrency.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/entities/NativeCurrency.ts","../src/entities/natives/Matic.ts","../src/entities/natives/Binance.ts","../src/constants/natives.ts","../src/constants/index.ts","../src/utils.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/functions/computePairAddress.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["export enum ChainId {\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  MAINNET = 56,\n  BSCTESTNET = 97\n}\n","import { ChainId } from '../enums/ChainId'\n\nexport const FACTORY_ADDRESSES: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x86325Af801Eb418eCE6Ff2Bb8F4C6322543858E4',\n  [ChainId.MATIC]: '0xaB9A2CB71E526ADD626747fD4D738f80572233D2',\n  [ChainId.MATIC_TESTNET]: '0xaB9A2CB71E526ADD626747fD4D738f80572233D2',\n  [ChainId.BSCTESTNET]: '0x7f86C595905506B9cab69Af085d969F2a2f06adC'\n}\n\nexport const ROUTER_ADDRESSES: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x5c75d3A4342f4874b33DE6E0609535Da0b9e4C5B',\n  [ChainId.MATIC]: '0x8a13265913EF40C4EA6D8519c2281c2A1fC5e93d',\n  [ChainId.MATIC_TESTNET]: '0x037D2Ab45B62aaf282473c20425B8EA1eF3d4dDd',\n  [ChainId.BSCTESTNET]: '0xAED59cDE6f480481d0096440cDBe6F092E96b336'\n}\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\nimport { ChainId } from '../enums/ChainId'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: ChainId\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../enums'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WNATIVE: { [chainId in ChainId]: Token } = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.BSCTESTNET]: new Token(\n    ChainId.BSCTESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  )\n}\n","import invariant from 'tiny-invariant'\n\nimport { AbstractCurrency } from './AbstractCurrency'\nimport { Currency } from './Currency'\nimport { Token, WNATIVE } from './Token'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { NativeCurrency } from '../NativeCurrency'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n}\n","import { NativeCurrency } from '../NativeCurrency'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n}\n","import { Binance, Matic } from '../entities/natives'\n\nimport { ChainId } from '../enums'\nimport { NativeCurrency } from 'entities/NativeCurrency'\n\nexport const NATIVE: { [chainId in ChainId]: NativeCurrency } = {\n  [ChainId.MAINNET]: Binance.onChain(ChainId.MAINNET),\n  [ChainId.BSCTESTNET]: Binance.onChain(ChainId.BSCTESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET)\n}\n","import { ChainId } from '../enums/ChainId'\nexport * from './addresses'\nexport * from './natives'\n\nimport JSBI from 'jsbi'\n\nexport const INIT_CODE_HASHES: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xd56c41afae4622ccce0d01f31c6837f59840ab1b102b7a97103a5d99671acd81',\n  [ChainId.MATIC]: '0x6d5fdaab3371d5d158f62abbc39e801a20feab6444a5750398a310ff3730c659',\n  [ChainId.MATIC_TESTNET]: '0x6d5fdaab3371d5d158f62abbc39e801a20feab6444a5750398a310ff3730c659',\n  [ChainId.BSCTESTNET]: '0x6d5fdaab3371d5d158f62abbc39e801a20feab6444a5750398a310ff3730c659'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _998 = JSBI.BigInt(998)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","import { getAddress } from '@ethersproject/address'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport { ONE, SolidityType, SOLIDITY_TYPE_MAXIMA, THREE, TWO, ZERO } from './constants'\nimport { BigintIsh } from './types'\n\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt((bigintIsh as any).toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { Rounding } from '../../enums'\nimport { BigintIsh } from '../../types'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { Currency } from '../Currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\nimport { Rounding } from '../../enums/Rounding'\nimport { BigintIsh } from '../../types'\nimport { NATIVE } from '../../constants'\nimport { ChainId } from '../../enums/ChainId'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the NATIVE currency respected with chainId\n   * @param amount ether amount in wei\n   */\n  public static native(amount: BigintIsh, chainId: ChainId): CurrencyAmount {\n    return new CurrencyAmount(NATIVE[chainId], amount)\n  }\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount(currency: Currency, rawAmount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(this.currency.equals(other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(this.currency.equals(other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../Token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../types'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../Token'\nimport { TokenAmount } from './tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { TEN } from '../../constants'\nimport { Rounding } from '../../enums'\nimport { BigintIsh } from '../../types'\nimport { Currency } from '../Currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.fromRawAmount(currencyAmount.currency, super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { FACTORY_ADDRESSES } from './../constants'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { INIT_CODE_HASHES, MINIMUM_LIQUIDITY, ZERO, ONE, FIVE, _998, _1000 } from '../constants'\n\nimport { BigintIsh } from '../types'\nimport { ChainId } from '../enums'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './Token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    const factoryAddress = FACTORY_ADDRESSES[tokenA.chainId]\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            factoryAddress,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASHES[tokens[0].chainId]\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _998)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _998)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../enums'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './Currency'\nimport { Token } from './Token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { _100 } from '../../constants'\nimport { Rounding } from '../../enums'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../constants'\nimport { ChainId, TradeType } from '../enums'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { WNATIVE } from './Token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency.isNative) return new TokenAmount(WNATIVE[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n      this.inputAmount = amount\n      this.outputAmount = CurrencyAmount.fromRawAmount(route.output, tokenAmounts[tokenAmounts.length - 1].raw)\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n      this.inputAmount = CurrencyAmount.fromRawAmount(route.input, tokenAmounts[0].raw)\n      this.outputAmount = amount\n    }\n\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n      // return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn);\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = wrappedAmount(currencyAmountIn, currencyAmountIn.currency.chainId)\n\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined = currencyAmountOut.currency.chainId\n    // currencyAmountOut instanceof TokenAmount\n    //   ? currencyAmountOut.token.chainId\n    //   : currencyIn instanceof Token\n    //   ? currencyIn.chainId\n    //   : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASHES } from '../constants'\nimport { Token } from '../entities/Token'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASHES[token0.chainId]\n  )\n}\n","import { TradeType } from './enums'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const nativeIn = trade.inputAmount.currency.isNative\n    const nativeOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(nativeIn && nativeOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (nativeIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (nativeOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (nativeIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (nativeOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport ILuckyswapPair from '@luckyswap/v2-core/build/LuckyswapPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './enums'\nimport { Token } from './entities/Token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, ILuckyswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","FACTORY_ADDRESSES","MAINNET","MATIC","MATIC_TESTNET","BSCTESTNET","ROUTER_ADDRESSES","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","Rounding","TradeType","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","Token","equals","other","isToken","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WNATIVE","NativeCurrency","isNative","wnative","Matic","onChain","_cache","Binance","NATIVE","INIT_CODE_HASHES","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_998","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","lessThanOrEqual","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","fromRawAmount","rawAmount","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","factoryAddress","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","wrappedInput","wrapped","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","Trade","tradeType","Array","nextPairs","EXACT_INPUT","nextPair","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","computePairAddress","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","nativeIn","nativeOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","ILuckyswapPair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}
